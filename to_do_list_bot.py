
import telebot
from datetime import datetime as dt
import logging
import operations as o
from operations import read_csv
from config import TOKEN
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
)
import stickers as st
import config

bot = telebot.TeleBot(config.TOKEN)
# –í–∫–ª—é—á–∏–º –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–∞–ø–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

START,MAIN_MENU, SUB_MENU, MENU, EDIT, ADD,NAME,SURNAME,STATUS,DELETE, VIEW, SEARCH, SEARCH_MENU= range(13)


# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä

def start(update, context):
    reply_keyboard = [['üé¨START','üö™EXIT']]
    markup_key = ReplyKeyboardMarkup(
        reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    context.bot.send_sticker(update.message.chat.id, st.welcome)
    context.bot.send_message(update.effective_chat.id,
                     f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª, {update.effective_user.first_name}!\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üé¨START\n'
        '–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üö™EXIT', reply_markup=markup_key)

    return MAIN_MENU


def main_menu(update, context):
    user = update.message.from_user
    logger.info("–í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: %s: %s", user.first_name, update.message.text)
    choice = update.message.text
    if choice == 'üé¨START':
        return sub_menu(update, context)
    if choice == 'üö™EXIT':        
        return cancel(update, context)

def sub_menu(update, context):
    reply_keyboard = [['üëÄ VIEW', 'üìù ADD','üîé SEARCH', '‚ùå DELETE', '‚úç EDIT', 'üö™ EXIT']]
    markup_key = ReplyKeyboardMarkup(
        reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    context.bot.send_sticker(update.message.chat.id, st.hello)
    update.message.reply_text('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ–ª ', reply_markup=markup_key)
    return MENU

def menu(update, context):
    user = update.message.from_user
    logger.info("–í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: %s: %s", user.first_name, update.message.text)
    choice = update.message.text
    if choice == 'üëÄ VIEW':
        return view(update, context)
    if choice == 'üìù ADD':
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        return NAME
    if choice == 'üîé SEARCH':
        context.bot.send_sticker(update.message.chat.id, st.listen)
        context.bot.send_message(update.effective_chat.id,
                     f'–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–π—Ç–∏,{update.effective_user.first_name}: ')
        return SEARCH
    if choice == '‚ùå DELETE':
        update.message.reply_text("–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        return DELETE
    if choice == '‚úç EDIT':
        update.message.reply_text("–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ")
        return EDIT    
    if choice == 'üö™ EXIT':
        return cancel(update, context)


def view(update, context):
    user = update.message.from_user
    logger.info("–ö–æ–Ω—Ç–∞–∫—Ç %s: %s", user.first_name, update.message.text)
    context.bot.send_sticker(update.message.chat.id, st.view_sticker)
    context.bot.send_message(update.effective_chat.id,
                     f'–ê –≤–æ—Ç –∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, {update.effective_user.first_name} ')
    tasks = read_csv()
    tasks_string = o.view_tasks(tasks)
    update.message.reply_text(tasks_string)
    return sub_menu(update, context)



def name(update, context):
    user = update.message.from_user
    logger.info("Task %s: %s", user.first_name, update.message.text)
    name = update.message.text
    context.user_data['name'] = name
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    return SURNAME

def surname(update, context):
    user = update.message.from_user
    logger.info("Task %s: %s", user.first_name, update.message.text)
    surname = update.message.text
    context.user_data['surname'] = surname
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è:\n <–≤ –ø–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è>\n <–≤—ã–ø–æ–ª–Ω–µ–Ω–æ>")
    return STATUS

def status(update, context):
    user = update.message.from_user
    logger.info("Task %s: %s", user.first_name, update.message.text)
    status= update.message.text
    context.user_data['status'] = status
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É")
    return ADD

def add(update, context):
    tasks = read_csv()
    task = {}
    user = update.message.from_user
    logger.info("Task %s: %s", user.first_name, update.message.text)
    add_task = update.message.text
    name = context.user_data.get('name')
    surname = context.user_data.get('surname')
    status = context.user_data.get('status')
    task['–ò–º—è'] = name
    task['–§–∞–º–∏–ª–∏—è'] = surname
    task['–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'] = status
    task['–ó–∞–¥–∞—á–∞'] = add_task
    tasks.append(task)
    o.write_csv(tasks)
    context.bot.send_sticker(update.message.chat.id, st.complete)
    context.bot.send_message(update.effective_chat.id,
                    f'{update.effective_user.first_name}, –∑–∞–¥–∞—á–∞ {task} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!:')
    return sub_menu(update, context)


def search(update, context):
    user = update.message.from_user
    logger.info("–í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞: %s: %s", user.first_name, update.message.text)
    searchstring = update.message.text
    tasks = read_csv()
    searched_tasks = o.search_task(searchstring, tasks)
    if searched_tasks==[]:
            context.bot.send_message(update.effective_chat.id,
                    f' {update.effective_user.first_name}, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "{searchstring}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:')
    else:                
        context.bot.send_message(update.effective_chat.id,
                        f' {update.effective_user.first_name}, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "{searchstring}" –Ω–∞–π–¥–µ–Ω–æ:')
        tasks_string = o.view_tasks(searched_tasks)
        update.message.reply_text(tasks_string)

    return sub_menu(update, context)

    


def delete(update, context):
    user = update.message.from_user
    logger.info("–í—ã–±–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è: %s: %s", user.first_name, update.message.text)
    searchstring = update.message.text
    searched_task=o.delete_task(searchstring)
    context.bot.send_sticker(update.message.chat.id, st.complete)
    update.message.reply_text(f'{searched_task}')
    return sub_menu(update, context)

    
def edit(update, context):
    user = update.message.from_user
    logger.info("–í—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s: %s", user.first_name, update.message.text)
    searchstring = update.message.text
    searched_task=o.delete_task(searchstring)
    context.bot.send_sticker(update.message.chat.id, st.complete)
    update.message.reply_text(f'{searched_task}')
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" )
    return NAME



def cancel(update, context):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.message.from_user
    # –ü–∏—à–µ–º –≤ –∂—É—Ä–Ω–∞–ª –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤—ã–π
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ—Ç–∫–∞–∑ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å
    context.bot.send_sticker(update.message.chat.id, st.goodbye)
    context.bot.send_message(update.effective_chat.id,
                     f'–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á, {update.effective_user.first_name}. üëã'
        '–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ –¥–µ–ª –Ω–∞–∂–º–∏—Ç–µ /start')
    context.bot.send_sticker(update.message.chat.id, st.relax)
    return ConversationHandler.END


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    updater = Updater(TOKEN)
    # –ø–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ `ConversationHandler`
    # —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ GENDER, PHOTO, LOCATION –∏ BIO
    game_conversation_handler = ConversationHandler(  # –∑–¥–µ—Å—å —Å—Ç—Ä–æ–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        # —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
        entry_points=[CommandHandler('start', start)],
        # —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        states={
            VIEW: [MessageHandler(Filters.text, view)],
            START: [CommandHandler('start', start)],
            SUB_MENU: [MessageHandler(Filters.text, sub_menu)],
            ADD: [MessageHandler(Filters.text, add)],
            NAME: [MessageHandler(Filters.text, name)],
            SURNAME: [MessageHandler(Filters.text, surname)],
            STATUS: [MessageHandler(Filters.text, status)],
            DELETE: [MessageHandler(Filters.text, delete)],
            SEARCH: [MessageHandler(Filters.text, search)],
            MENU: [MessageHandler(Filters.text, menu)],
            MAIN_MENU: [MessageHandler(Filters.text,main_menu)],
            EDIT: [MessageHandler(Filters.text, edit)],
        },
        # —Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ `conv_handler`
    dispatcher.add_handler(game_conversation_handler)

    # –ó–∞–ø—É—Å–∫ 
    print('SERVER_STARTED')
    updater.start_polling()
    updater.idle()